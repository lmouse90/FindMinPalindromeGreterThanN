#include <iostream>
using namespace std;
const int maxNumLength = 64;
int num[maxNumLength];
//给的int N，求x，x是大于N的最小回文数
/*
如果左边的数的反转大于右边，则可以直接反转
否则分奇偶数讨论（主要是中位数的问题，对于偶数个，应该选择较大的一个为中间，主要是为了进位产生后进行计算），
同时也要考虑9的情况,如果产生进位，则相当于左边部分加1产生新数，对于右边只要进行相应反转即是最小
测试用例：123456、291、341、1、9、999、9999、299、1234222
*/
long long minRecurve(long long N)
{
	//将数分解到数组中
	int H =0; //记录数值的最高位    
	long long tmpN =N;
	while (tmpN)
	{
		num[H] = tmpN % 10;
		tmpN /= 10;
		++H;
	}
	num[H] =0; //此处重要，预设数值结束位，方便后续操作

	int low = 0, high = 0;
	int i;
	int mid = (H)/2;

	//记录低位值
	for(i=0; i<mid; i++)
	{
		low = low*10 + num[i];
	}

	//记录高位置，此处将高位逆置，便于和低位进行比较，需要区分奇偶数
	//比如123456，低位为456，高位为321， 9999，低位99，高位99
	if((H)%2)
	{
		for(i=H-1; i>(H)/2; i--)
		{
			high = high*10 + num[i];
		}
	}
	else
	{
		for(i=H-1; i>=(H)/2; i--)
		{
			high = high*10 + num[i];
		}
	}
	//如果高位逆置大于低位，可以直接转换，比如291->292, 98->99
	if(high > low)
	{
		if((H)%2)  //奇数处理
		{
			for(i=mid-1; i>=0; i--)
			{
				num[i] = num[2*mid-i]; //此处需要注意
			}
		}
		else  //偶数处理
		{
			for(i=mid-1; i>=0; i--)
			{
				num[i] = num[2*mid-1-i];
			}
		}
	}
	else
	{
		//如果中间值小于9，则可以对中间值加1，然后对低位把高位进行逆转
		if(num[mid] < 9)
		{
			num[mid] = num[mid] + 1;
			//turn over 239--242  24--33
			if((H)%2)  //odd
			{
				for(i=mid-1; i>=0; i--)
				{
					num[i] = num[2*mid-i];
				}
			}
			else
			{
				for(i=mid-1; i>=0; i--)
				{
					num[i] = num[2*mid-1-i];
				}
			}
		}
		else  //否则，需要计算高位，并且判断是否最高位有进位，例如99,999这些，会导致数值位数变化
		{
			num[mid] = 0;
			int flag = 1;
			for(i=mid+1; i<H; i++)
			{
				int tmp = num[i] + flag;
				if(tmp == 10)
				{
					num[i] = 0;
					flag = 1;
				}
				else 
				{
					num[i] = tmp;
					flag = 0;
					break;
				}
			}
			//如果产生进位，则对高位模拟+1处理后，更改中间的位数，对低位直接求反即可
			if(i == H && flag == 1)
			{
				num[H] = 1;
				//turn over  999---1001 9999---10001
				mid = (H+1)/2;
				if(H%2)  //odd
				{
					for(i=mid-1; i>=0; i--)
					{
						num[i] = num[2*mid-1-i];
					}
				}
				else
				{
					for(i=mid-1; i>=0; i--)
					{
						num[i] = num[2*mid-i];
					}
				}
			}
			else //否则，直接对高地位求反即可
			{
				//turn over 298--303  2993---3003
				if((H)%2)  //odd
				{
					for(i=mid-1; i>=0; i--)
					{
						num[i] = num[2*mid-i];
					}
				}
				else
				{
					for(i=mid-1; i>=0; i--)
					{
						num[i] = num[2*mid-1-i];
					}
				}
			}
		}
	}
	long long result = 0;
	//if(num[H]) result = num[H];
	for(i=H; i>=0; i--)
	{
		result = result*10 + num[i];
	}

	return result;
}
int main()
{
	long long num;
	while(cin >> num)
	{
		cout << minRecuive(num);
	}

	return 0;
}
